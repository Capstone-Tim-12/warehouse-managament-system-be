// Code generated by mockery v2.20.2. DO NOT EDIT.

package mocks

import (
	context "context"

	entity "github.com/Capstone-Tim-12/warehouse-managament-system-be/repository/database/entity"
	gorm "gorm.io/gorm"

	mock "github.com/stretchr/testify/mock"

	paginate "github.com/Capstone-Tim-12/warehouse-managament-system-be/utils/paginate"
)

// UserRepository is an autogenerated mock type for the UserRepository type
type UserRepository struct {
	mock.Mock
}

// BeginTrans provides a mock function with given fields: ctx
func (_m *UserRepository) BeginTrans(ctx context.Context) *gorm.DB {
	ret := _m.Called(ctx)

	var r0 *gorm.DB
	if rf, ok := ret.Get(0).(func(context.Context) *gorm.DB); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gorm.DB)
		}
	}

	return r0
}

// CreateDetail provides a mock function with given fields: ctx, tx, req
func (_m *UserRepository) CreateDetail(ctx context.Context, tx *gorm.DB, req *entity.UserDetail) error {
	ret := _m.Called(ctx, tx, req)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *gorm.DB, *entity.UserDetail) error); ok {
		r0 = rf(ctx, tx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateUser provides a mock function with given fields: ctx, tx, req
func (_m *UserRepository) CreateUser(ctx context.Context, tx *gorm.DB, req *entity.User) error {
	ret := _m.Called(ctx, tx, req)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *gorm.DB, *entity.User) error); ok {
		r0 = rf(ctx, tx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteUser provides a mock function with given fields: ctx, req
func (_m *UserRepository) DeleteUser(ctx context.Context, req *entity.User) error {
	ret := _m.Called(ctx, req)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.User) error); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllAvatar provides a mock function with given fields: ctx
func (_m *UserRepository) GetAllAvatar(ctx context.Context) ([]entity.Avatar, error) {
	ret := _m.Called(ctx)

	var r0 []entity.Avatar
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]entity.Avatar, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []entity.Avatar); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Avatar)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserByEmail provides a mock function with given fields: ctx, email
func (_m *UserRepository) GetUserByEmail(ctx context.Context, email string) (*entity.User, error) {
	ret := _m.Called(ctx, email)

	var r0 *entity.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*entity.User, error)); ok {
		return rf(ctx, email)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *entity.User); ok {
		r0 = rf(ctx, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserByEmailUsername provides a mock function with given fields: ctx, email, username
func (_m *UserRepository) GetUserByEmailUsername(ctx context.Context, email string, username string) (*entity.User, error) {
	ret := _m.Called(ctx, email, username)

	var r0 *entity.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*entity.User, error)); ok {
		return rf(ctx, email, username)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *entity.User); ok {
		r0 = rf(ctx, email, username)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, email, username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserById provides a mock function with given fields: ctx, id
func (_m *UserRepository) GetUserById(ctx context.Context, id int) (*entity.User, error) {
	ret := _m.Called(ctx, id)

	var r0 *entity.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (*entity.User, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) *entity.User); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserByUsername provides a mock function with given fields: ctx, username
func (_m *UserRepository) GetUserByUsername(ctx context.Context, username string) (*entity.User, error) {
	ret := _m.Called(ctx, username)

	var r0 *entity.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*entity.User, error)); ok {
		return rf(ctx, username)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *entity.User); ok {
		r0 = rf(ctx, username)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserDetailByUserId provides a mock function with given fields: ctx, userId
func (_m *UserRepository) GetUserDetailByUserId(ctx context.Context, userId int) (*entity.UserDetail, error) {
	ret := _m.Called(ctx, userId)

	var r0 *entity.UserDetail
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (*entity.UserDetail, error)); ok {
		return rf(ctx, userId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) *entity.UserDetail); ok {
		r0 = rf(ctx, userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.UserDetail)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserInfoById provides a mock function with given fields: ctx, id
func (_m *UserRepository) GetUserInfoById(ctx context.Context, id int) (*entity.User, error) {
	ret := _m.Called(ctx, id)

	var r0 *entity.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (*entity.User, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) *entity.User); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserList provides a mock function with given fields: ctx, param
func (_m *UserRepository) GetUserList(ctx context.Context, param paginate.Pagination) ([]entity.User, int64, error) {
	ret := _m.Called(ctx, param)

	var r0 []entity.User
	var r1 int64
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, paginate.Pagination) ([]entity.User, int64, error)); ok {
		return rf(ctx, param)
	}
	if rf, ok := ret.Get(0).(func(context.Context, paginate.Pagination) []entity.User); ok {
		r0 = rf(ctx, param)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, paginate.Pagination) int64); ok {
		r1 = rf(ctx, param)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(context.Context, paginate.Pagination) error); ok {
		r2 = rf(ctx, param)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// UpdateUser provides a mock function with given fields: ctx, tx, req
func (_m *UserRepository) UpdateUser(ctx context.Context, tx *gorm.DB, req *entity.User) error {
	ret := _m.Called(ctx, tx, req)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *gorm.DB, *entity.User) error); ok {
		r0 = rf(ctx, tx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewUserRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewUserRepository creates a new instance of UserRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUserRepository(t mockConstructorTestingTNewUserRepository) *UserRepository {
	mock := &UserRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
