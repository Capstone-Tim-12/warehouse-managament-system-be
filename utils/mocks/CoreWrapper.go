// Code generated by mockery v2.20.2. DO NOT EDIT.

package mocks

import (
	context "context"

	core "github.com/Capstone-Tim-12/warehouse-managament-system-be/repository/http/core"
	mock "github.com/stretchr/testify/mock"

	multipart "mime/multipart"
)

// CoreWrapper is an autogenerated mock type for the CoreWrapper type
type CoreWrapper struct {
	mock.Mock
}

// CheckPayment provides a mock function with given fields: ctx, paymentId
func (_m *CoreWrapper) CheckPayment(ctx context.Context, paymentId string) (core.CheckPaymentResponse, error) {
	ret := _m.Called(ctx, paymentId)

	var r0 core.CheckPaymentResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (core.CheckPaymentResponse, error)); ok {
		return rf(ctx, paymentId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) core.CheckPaymentResponse); ok {
		r0 = rf(ctx, paymentId)
	} else {
		r0 = ret.Get(0).(core.CheckPaymentResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, paymentId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateVA provides a mock function with given fields: ctx, req
func (_m *CoreWrapper) CreateVA(ctx context.Context, req core.CreateVirtualAccountRequest) (core.CreateViartualAccountResponse, error) {
	ret := _m.Called(ctx, req)

	var r0 core.CreateViartualAccountResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, core.CreateVirtualAccountRequest) (core.CreateViartualAccountResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, core.CreateVirtualAccountRequest) core.CreateViartualAccountResponse); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(core.CreateViartualAccountResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, core.CreateVirtualAccountRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBank provides a mock function with given fields: ctx
func (_m *CoreWrapper) GetBank(ctx context.Context) (core.GetBankResponse, error) {
	ret := _m.Called(ctx)

	var r0 core.GetBankResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (core.GetBankResponse, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) core.GetBankResponse); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(core.GetBankResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUtilityData provides a mock function with given fields: ctx, key
func (_m *CoreWrapper) GetUtilityData(ctx context.Context, key string) (core.GetUtilityResponse, error) {
	ret := _m.Called(ctx, key)

	var r0 core.GetUtilityResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (core.GetUtilityResponse, error)); ok {
		return rf(ctx, key)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) core.GetUtilityResponse); ok {
		r0 = rf(ctx, key)
	} else {
		r0 = ret.Get(0).(core.GetUtilityResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SendEmail provides a mock function with given fields: ctx, req
func (_m *CoreWrapper) SendEmail(ctx context.Context, req core.SendEmailRequest) (core.SendEmailResponse, error) {
	ret := _m.Called(ctx, req)

	var r0 core.SendEmailResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, core.SendEmailRequest) (core.SendEmailResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, core.SendEmailRequest) core.SendEmailResponse); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(core.SendEmailResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, core.SendEmailRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetUtility provides a mock function with given fields: ctx, req
func (_m *CoreWrapper) SetUtility(ctx context.Context, req core.SetUtilityRequest) (core.SetUtilityResponse, error) {
	ret := _m.Called(ctx, req)

	var r0 core.SetUtilityResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, core.SetUtilityRequest) (core.SetUtilityResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, core.SetUtilityRequest) core.SetUtilityResponse); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(core.SetUtilityResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, core.SetUtilityRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UploadImage provides a mock function with given fields: ctx, req
func (_m *CoreWrapper) UploadImage(ctx context.Context, req *multipart.FileHeader) (core.UploadImageResponse, error) {
	ret := _m.Called(ctx, req)

	var r0 core.UploadImageResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *multipart.FileHeader) (core.UploadImageResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *multipart.FileHeader) core.UploadImageResponse); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(core.UploadImageResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *multipart.FileHeader) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewCoreWrapper interface {
	mock.TestingT
	Cleanup(func())
}

// NewCoreWrapper creates a new instance of CoreWrapper. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewCoreWrapper(t mockConstructorTestingTNewCoreWrapper) *CoreWrapper {
	mock := &CoreWrapper{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
