// Code generated by mockery v2.20.2. DO NOT EDIT.

package mocks

import (
	context "context"
	multipart "mime/multipart"

	model "github.com/Capstone-Tim-12/warehouse-managament-system-be/usecase/warehouse/model"
	mock "github.com/stretchr/testify/mock"

	paginate "github.com/Capstone-Tim-12/warehouse-managament-system-be/utils/paginate"
)

// WarehouseUsecase is an autogenerated mock type for the WarehouseUsecase type
type WarehouseUsecase struct {
	mock.Mock
}

// AddFavorite provides a mock function with given fields: ctx, userId, req
func (_m *WarehouseUsecase) AddFavorite(ctx context.Context, userId int, req model.AddFavoritRequest) error {
	ret := _m.Called(ctx, userId, req)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int, model.AddFavoritRequest) error); ok {
		r0 = rf(ctx, userId, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateWarehouse provides a mock function with given fields: ctx, req
func (_m *WarehouseUsecase) CreateWarehouse(ctx context.Context, req model.WarehouseDataRequest) error {
	ret := _m.Called(ctx, req)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, model.WarehouseDataRequest) error); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteFavorit provides a mock function with given fields: ctx, userId, warehouseId
func (_m *WarehouseUsecase) DeleteFavorit(ctx context.Context, userId int, warehouseId int) error {
	ret := _m.Called(ctx, userId, warehouseId)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int) error); ok {
		r0 = rf(ctx, userId, warehouseId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteWarehouse provides a mock function with given fields: ctx, id
func (_m *WarehouseUsecase) DeleteWarehouse(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetListFavorite provides a mock function with given fields: ctx, userId, param
func (_m *WarehouseUsecase) GetListFavorite(ctx context.Context, userId int, param paginate.Pagination) ([]model.WarehouseListResponse, int64, error) {
	ret := _m.Called(ctx, userId, param)

	var r0 []model.WarehouseListResponse
	var r1 int64
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, int, paginate.Pagination) ([]model.WarehouseListResponse, int64, error)); ok {
		return rf(ctx, userId, param)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, paginate.Pagination) []model.WarehouseListResponse); ok {
		r0 = rf(ctx, userId, param)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.WarehouseListResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, paginate.Pagination) int64); ok {
		r1 = rf(ctx, userId, param)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(context.Context, int, paginate.Pagination) error); ok {
		r2 = rf(ctx, userId, param)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetListWarehouseType provides a mock function with given fields: ctx
func (_m *WarehouseUsecase) GetListWarehouseType(ctx context.Context) ([]model.WarehouseTypeResponse, error) {
	ret := _m.Called(ctx)

	var r0 []model.WarehouseTypeResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]model.WarehouseTypeResponse, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []model.WarehouseTypeResponse); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.WarehouseTypeResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMywarehouse provides a mock function with given fields: ctx, userId, status, param
func (_m *WarehouseUsecase) GetMywarehouse(ctx context.Context, userId int, status model.TrxStatus, param paginate.Pagination) ([]model.MyWarehoyseResponse, int64, error) {
	ret := _m.Called(ctx, userId, status, param)

	var r0 []model.MyWarehoyseResponse
	var r1 int64
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, int, model.TrxStatus, paginate.Pagination) ([]model.MyWarehoyseResponse, int64, error)); ok {
		return rf(ctx, userId, status, param)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, model.TrxStatus, paginate.Pagination) []model.MyWarehoyseResponse); ok {
		r0 = rf(ctx, userId, status, param)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.MyWarehoyseResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, model.TrxStatus, paginate.Pagination) int64); ok {
		r1 = rf(ctx, userId, status, param)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(context.Context, int, model.TrxStatus, paginate.Pagination) error); ok {
		r2 = rf(ctx, userId, status, param)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetWarehouse provides a mock function with given fields: ctx, id
func (_m *WarehouseUsecase) GetWarehouse(ctx context.Context, id int) (*model.WarehouseDataResponse, error) {
	ret := _m.Called(ctx, id)

	var r0 *model.WarehouseDataResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (*model.WarehouseDataResponse, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) *model.WarehouseDataResponse); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.WarehouseDataResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetWarehouseInfo provides a mock function with given fields: ctx, warehouseId
func (_m *WarehouseUsecase) GetWarehouseInfo(ctx context.Context, warehouseId int) (model.WarehouseInfoResponse, error) {
	ret := _m.Called(ctx, warehouseId)

	var r0 model.WarehouseInfoResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (model.WarehouseInfoResponse, error)); ok {
		return rf(ctx, warehouseId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) model.WarehouseInfoResponse); ok {
		r0 = rf(ctx, warehouseId)
	} else {
		r0 = ret.Get(0).(model.WarehouseInfoResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, warehouseId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetWarehouseList provides a mock function with given fields: ctx, param, userId
func (_m *WarehouseUsecase) GetWarehouseList(ctx context.Context, param paginate.Pagination, userId int) ([]model.WarehouseListResponse, int64, error) {
	ret := _m.Called(ctx, param, userId)

	var r0 []model.WarehouseListResponse
	var r1 int64
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, paginate.Pagination, int) ([]model.WarehouseListResponse, int64, error)); ok {
		return rf(ctx, param, userId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, paginate.Pagination, int) []model.WarehouseListResponse); ok {
		r0 = rf(ctx, param, userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.WarehouseListResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, paginate.Pagination, int) int64); ok {
		r1 = rf(ctx, param, userId)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(context.Context, paginate.Pagination, int) error); ok {
		r2 = rf(ctx, param, userId)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ImportCsvFileWarehouse provides a mock function with given fields: ctx, file
func (_m *WarehouseUsecase) ImportCsvFileWarehouse(ctx context.Context, file *multipart.FileHeader) error {
	ret := _m.Called(ctx, file)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *multipart.FileHeader) error); ok {
		r0 = rf(ctx, file)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateWarehouseDetails provides a mock function with given fields: ctx, req, id
func (_m *WarehouseUsecase) UpdateWarehouseDetails(ctx context.Context, req model.WarehouseDataRequest, id int) error {
	ret := _m.Called(ctx, req, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, model.WarehouseDataRequest, int) error); ok {
		r0 = rf(ctx, req, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UploadPhotoWarehouse provides a mock function with given fields: ctx, photo
func (_m *WarehouseUsecase) UploadPhotoWarehouse(ctx context.Context, photo []*multipart.FileHeader) (model.UploadPhotoResponse, error) {
	ret := _m.Called(ctx, photo)

	var r0 model.UploadPhotoResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []*multipart.FileHeader) (model.UploadPhotoResponse, error)); ok {
		return rf(ctx, photo)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []*multipart.FileHeader) model.UploadPhotoResponse); ok {
		r0 = rf(ctx, photo)
	} else {
		r0 = ret.Get(0).(model.UploadPhotoResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, []*multipart.FileHeader) error); ok {
		r1 = rf(ctx, photo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewWarehouseUsecase interface {
	mock.TestingT
	Cleanup(func())
}

// NewWarehouseUsecase creates a new instance of WarehouseUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewWarehouseUsecase(t mockConstructorTestingTNewWarehouseUsecase) *WarehouseUsecase {
	mock := &WarehouseUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
