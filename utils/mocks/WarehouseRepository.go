// Code generated by mockery v2.20.2. DO NOT EDIT.

package mocks

import (
	context "context"

	entity "github.com/Capstone-Tim-12/warehouse-managament-system-be/repository/database/entity"
	gorm "gorm.io/gorm"

	mock "github.com/stretchr/testify/mock"

	paginate "github.com/Capstone-Tim-12/warehouse-managament-system-be/utils/paginate"
)

// WarehouseRepository is an autogenerated mock type for the WarehouseRepository type
type WarehouseRepository struct {
	mock.Mock
}

// AddFavorit provides a mock function with given fields: ctx, req
func (_m *WarehouseRepository) AddFavorit(ctx context.Context, req *entity.Favorit) error {
	ret := _m.Called(ctx, req)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.Favorit) error); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// BeginTrans provides a mock function with given fields: ctx
func (_m *WarehouseRepository) BeginTrans(ctx context.Context) *gorm.DB {
	ret := _m.Called(ctx)

	var r0 *gorm.DB
	if rf, ok := ret.Get(0).(func(context.Context) *gorm.DB); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gorm.DB)
		}
	}

	return r0
}

// CreateDetail provides a mock function with given fields: ctx, tx, req
func (_m *WarehouseRepository) CreateDetail(ctx context.Context, tx *gorm.DB, req *entity.Warehouse) error {
	ret := _m.Called(ctx, tx, req)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *gorm.DB, *entity.Warehouse) error); ok {
		r0 = rf(ctx, tx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateImg provides a mock function with given fields: ctx, tx, req
func (_m *WarehouseRepository) CreateImg(ctx context.Context, tx *gorm.DB, req *entity.WarehouseImg) error {
	ret := _m.Called(ctx, tx, req)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *gorm.DB, *entity.WarehouseImg) error); ok {
		r0 = rf(ctx, tx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteFavorite provides a mock function with given fields: ctx, userId, warehouseId
func (_m *WarehouseRepository) DeleteFavorite(ctx context.Context, userId int, warehouseId int) error {
	ret := _m.Called(ctx, userId, warehouseId)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int) error); ok {
		r0 = rf(ctx, userId, warehouseId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteWarehouse provides a mock function with given fields: ctx, req
func (_m *WarehouseRepository) DeleteWarehouse(ctx context.Context, req *entity.Warehouse) error {
	ret := _m.Called(ctx, req)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.Warehouse) error); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteWarehouseImgByWarehouseId provides a mock function with given fields: ctx, tx, warehouseId
func (_m *WarehouseRepository) DeleteWarehouseImgByWarehouseId(ctx context.Context, tx *gorm.DB, warehouseId int) error {
	ret := _m.Called(ctx, tx, warehouseId)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *gorm.DB, int) error); ok {
		r0 = rf(ctx, tx, warehouseId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindFavoritById provides a mock function with given fields: ctx, waehouseId
func (_m *WarehouseRepository) FindFavoritById(ctx context.Context, waehouseId int) (*entity.Favorit, error) {
	ret := _m.Called(ctx, waehouseId)

	var r0 *entity.Favorit
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (*entity.Favorit, error)); ok {
		return rf(ctx, waehouseId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) *entity.Favorit); ok {
		r0 = rf(ctx, waehouseId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Favorit)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, waehouseId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindFavoritByWarehouseIdAndUserId provides a mock function with given fields: ctx, waehouseId, userId
func (_m *WarehouseRepository) FindFavoritByWarehouseIdAndUserId(ctx context.Context, waehouseId int, userId int) (*entity.Favorit, error) {
	ret := _m.Called(ctx, waehouseId, userId)

	var r0 *entity.Favorit
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int) (*entity.Favorit, error)); ok {
		return rf(ctx, waehouseId, userId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, int) *entity.Favorit); ok {
		r0 = rf(ctx, waehouseId, userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Favorit)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, int) error); ok {
		r1 = rf(ctx, waehouseId, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindImageWarehouseById provides a mock function with given fields: ctx, id
func (_m *WarehouseRepository) FindImageWarehouseById(ctx context.Context, id string) (*entity.WarehouseImg, error) {
	ret := _m.Called(ctx, id)

	var r0 *entity.WarehouseImg
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*entity.WarehouseImg, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *entity.WarehouseImg); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.WarehouseImg)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindListFavoriteByUserId provides a mock function with given fields: ctx, userId, param
func (_m *WarehouseRepository) FindListFavoriteByUserId(ctx context.Context, userId int, param paginate.Pagination) ([]entity.Favorit, int64, error) {
	ret := _m.Called(ctx, userId, param)

	var r0 []entity.Favorit
	var r1 int64
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, int, paginate.Pagination) ([]entity.Favorit, int64, error)); ok {
		return rf(ctx, userId, param)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, paginate.Pagination) []entity.Favorit); ok {
		r0 = rf(ctx, userId, param)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Favorit)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, paginate.Pagination) int64); ok {
		r1 = rf(ctx, userId, param)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(context.Context, int, paginate.Pagination) error); ok {
		r2 = rf(ctx, userId, param)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// FindWarehouseById provides a mock function with given fields: ctx, id
func (_m *WarehouseRepository) FindWarehouseById(ctx context.Context, id int) (*entity.Warehouse, error) {
	ret := _m.Called(ctx, id)

	var r0 *entity.Warehouse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (*entity.Warehouse, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) *entity.Warehouse); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Warehouse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindWarehouseByIdOnly provides a mock function with given fields: ctx, id
func (_m *WarehouseRepository) FindWarehouseByIdOnly(ctx context.Context, id string) (*entity.Warehouse, error) {
	ret := _m.Called(ctx, id)

	var r0 *entity.Warehouse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*entity.Warehouse, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *entity.Warehouse); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Warehouse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindWarehouseList provides a mock function with given fields: ctx, param, long, lat
func (_m *WarehouseRepository) FindWarehouseList(ctx context.Context, param paginate.Pagination, long float64, lat float64) ([]entity.Warehouse, int64, error) {
	ret := _m.Called(ctx, param, long, lat)

	var r0 []entity.Warehouse
	var r1 int64
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, paginate.Pagination, float64, float64) ([]entity.Warehouse, int64, error)); ok {
		return rf(ctx, param, long, lat)
	}
	if rf, ok := ret.Get(0).(func(context.Context, paginate.Pagination, float64, float64) []entity.Warehouse); ok {
		r0 = rf(ctx, param, long, lat)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Warehouse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, paginate.Pagination, float64, float64) int64); ok {
		r1 = rf(ctx, param, long, lat)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(context.Context, paginate.Pagination, float64, float64) error); ok {
		r2 = rf(ctx, param, long, lat)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetListWarehouseType provides a mock function with given fields: ctx
func (_m *WarehouseRepository) GetListWarehouseType(ctx context.Context) ([]entity.WarehouseType, error) {
	ret := _m.Called(ctx)

	var r0 []entity.WarehouseType
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]entity.WarehouseType, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []entity.WarehouseType); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.WarehouseType)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTotalWarehouseByStatus provides a mock function with given fields: ctx, status
func (_m *WarehouseRepository) GetTotalWarehouseByStatus(ctx context.Context, status entity.WarehouseStatus) (int64, error) {
	ret := _m.Called(ctx, status)

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.WarehouseStatus) (int64, error)); ok {
		return rf(ctx, status)
	}
	if rf, ok := ret.Get(0).(func(context.Context, entity.WarehouseStatus) int64); ok {
		r0 = rf(ctx, status)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, entity.WarehouseStatus) error); ok {
		r1 = rf(ctx, status)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetWarehouseTypeById provides a mock function with given fields: ctx, id
func (_m *WarehouseRepository) GetWarehouseTypeById(ctx context.Context, id int) (*entity.WarehouseType, error) {
	ret := _m.Called(ctx, id)

	var r0 *entity.WarehouseType
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (*entity.WarehouseType, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) *entity.WarehouseType); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.WarehouseType)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateWarehouse provides a mock function with given fields: ctx, tx, req
func (_m *WarehouseRepository) UpdateWarehouse(ctx context.Context, tx *gorm.DB, req *entity.Warehouse) error {
	ret := _m.Called(ctx, tx, req)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *gorm.DB, *entity.Warehouse) error); ok {
		r0 = rf(ctx, tx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewWarehouseRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewWarehouseRepository creates a new instance of WarehouseRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewWarehouseRepository(t mockConstructorTestingTNewWarehouseRepository) *WarehouseRepository {
	mock := &WarehouseRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
