// Code generated by mockery v2.20.2. DO NOT EDIT.

package mocks

import (
	context "context"

	model "github.com/Capstone-Tim-12/warehouse-managament-system-be/usecase/payment/model"
	paginate "github.com/Capstone-Tim-12/warehouse-managament-system-be/utils/paginate"
	mock "github.com/stretchr/testify/mock"
)

// PaymentUsecase is an autogenerated mock type for the PaymentUsecase type
type PaymentUsecase struct {
	mock.Mock
}

// GetAllTransaction provides a mock function with given fields: ctx, param
func (_m *PaymentUsecase) GetAllTransaction(ctx context.Context, param paginate.PaginationTrx) ([]model.ListAllTrxResponse, int64, error) {
	ret := _m.Called(ctx, param)

	var r0 []model.ListAllTrxResponse
	var r1 int64
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, paginate.PaginationTrx) ([]model.ListAllTrxResponse, int64, error)); ok {
		return rf(ctx, param)
	}
	if rf, ok := ret.Get(0).(func(context.Context, paginate.PaginationTrx) []model.ListAllTrxResponse); ok {
		r0 = rf(ctx, param)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.ListAllTrxResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, paginate.PaginationTrx) int64); ok {
		r1 = rf(ctx, param)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(context.Context, paginate.PaginationTrx) error); ok {
		r2 = rf(ctx, param)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetBankVa provides a mock function with given fields: ctx
func (_m *PaymentUsecase) GetBankVa(ctx context.Context) ([]model.VaBankResponse, error) {
	ret := _m.Called(ctx)

	var r0 []model.VaBankResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]model.VaBankResponse, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []model.VaBankResponse); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.VaBankResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetHistoryInstalmentUser provides a mock function with given fields: ctx, param
func (_m *PaymentUsecase) GetHistoryInstalmentUser(ctx context.Context, param paginate.Pagination) ([]model.TransactionHistoryResponse, int64, error) {
	ret := _m.Called(ctx, param)

	var r0 []model.TransactionHistoryResponse
	var r1 int64
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, paginate.Pagination) ([]model.TransactionHistoryResponse, int64, error)); ok {
		return rf(ctx, param)
	}
	if rf, ok := ret.Get(0).(func(context.Context, paginate.Pagination) []model.TransactionHistoryResponse); ok {
		r0 = rf(ctx, param)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.TransactionHistoryResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, paginate.Pagination) int64); ok {
		r1 = rf(ctx, param)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(context.Context, paginate.Pagination) error); ok {
		r2 = rf(ctx, param)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetListInstalmentByTrxId provides a mock function with given fields: ctx, transactionId, param
func (_m *PaymentUsecase) GetListInstalmentByTrxId(ctx context.Context, transactionId string, param paginate.Pagination) ([]model.ListInstalmentResponse, int64, error) {
	ret := _m.Called(ctx, transactionId, param)

	var r0 []model.ListInstalmentResponse
	var r1 int64
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string, paginate.Pagination) ([]model.ListInstalmentResponse, int64, error)); ok {
		return rf(ctx, transactionId, param)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, paginate.Pagination) []model.ListInstalmentResponse); ok {
		r0 = rf(ctx, transactionId, param)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.ListInstalmentResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, paginate.Pagination) int64); ok {
		r1 = rf(ctx, transactionId, param)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, paginate.Pagination) error); ok {
		r2 = rf(ctx, transactionId, param)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetListPaymentMethod provides a mock function with given fields: ctx
func (_m *PaymentUsecase) GetListPaymentMethod(ctx context.Context) ([]model.PaymentMethodResponse, error) {
	ret := _m.Called(ctx)

	var r0 []model.PaymentMethodResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]model.PaymentMethodResponse, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []model.PaymentMethodResponse); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.PaymentMethodResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetListTranscationByWarehouseId provides a mock function with given fields: ctx, warehouseId, param
func (_m *PaymentUsecase) GetListTranscationByWarehouseId(ctx context.Context, warehouseId int, param paginate.Pagination) ([]model.ListTransactionWarehouseDasboard, int64, error) {
	ret := _m.Called(ctx, warehouseId, param)

	var r0 []model.ListTransactionWarehouseDasboard
	var r1 int64
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, int, paginate.Pagination) ([]model.ListTransactionWarehouseDasboard, int64, error)); ok {
		return rf(ctx, warehouseId, param)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, paginate.Pagination) []model.ListTransactionWarehouseDasboard); ok {
		r0 = rf(ctx, warehouseId, param)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.ListTransactionWarehouseDasboard)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, paginate.Pagination) int64); ok {
		r1 = rf(ctx, warehouseId, param)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(context.Context, int, paginate.Pagination) error); ok {
		r2 = rf(ctx, warehouseId, param)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetListTrxUserDasboar provides a mock function with given fields: ctx, userId, param
func (_m *PaymentUsecase) GetListTrxUserDasboar(ctx context.Context, userId int, param paginate.Pagination) ([]model.ListTrxUserDasboarResponse, int64, error) {
	ret := _m.Called(ctx, userId, param)

	var r0 []model.ListTrxUserDasboarResponse
	var r1 int64
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, int, paginate.Pagination) ([]model.ListTrxUserDasboarResponse, int64, error)); ok {
		return rf(ctx, userId, param)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, paginate.Pagination) []model.ListTrxUserDasboarResponse); ok {
		r0 = rf(ctx, userId, param)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.ListTrxUserDasboarResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, paginate.Pagination) int64); ok {
		r1 = rf(ctx, userId, param)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(context.Context, int, paginate.Pagination) error); ok {
		r2 = rf(ctx, userId, param)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetPaymentScheme provides a mock function with given fields: ctx
func (_m *PaymentUsecase) GetPaymentScheme(ctx context.Context) ([]model.SchemeResponse, error) {
	ret := _m.Called(ctx)

	var r0 []model.SchemeResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]model.SchemeResponse, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []model.SchemeResponse); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.SchemeResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetReasoneList provides a mock function with given fields: ctx
func (_m *PaymentUsecase) GetReasoneList(ctx context.Context) ([]model.ReasoneData, error) {
	ret := _m.Called(ctx)

	var r0 []model.ReasoneData
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]model.ReasoneData, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []model.ReasoneData); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.ReasoneData)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetStatistictPaymentOnYear provides a mock function with given fields: ctx
func (_m *PaymentUsecase) GetStatistictPaymentOnYear(ctx context.Context) ([]model.StatiscticPayment, error) {
	ret := _m.Called(ctx)

	var r0 []model.StatiscticPayment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]model.StatiscticPayment, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []model.StatiscticPayment); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.StatiscticPayment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTotalPaymentDasboard provides a mock function with given fields: ctx
func (_m *PaymentUsecase) GetTotalPaymentDasboard(ctx context.Context) (model.GetTotalPayment, error) {
	ret := _m.Called(ctx)

	var r0 model.GetTotalPayment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (model.GetTotalPayment, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) model.GetTotalPayment); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(model.GetTotalPayment)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTransactionDetailDasboardUser provides a mock function with given fields: ctx, transactionId
func (_m *PaymentUsecase) GetTransactionDetailDasboardUser(ctx context.Context, transactionId string) (model.TransactionDetailUser, error) {
	ret := _m.Called(ctx, transactionId)

	var r0 model.TransactionDetailUser
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (model.TransactionDetailUser, error)); ok {
		return rf(ctx, transactionId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) model.TransactionDetailUser); ok {
		r0 = rf(ctx, transactionId)
	} else {
		r0 = ret.Get(0).(model.TransactionDetailUser)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, transactionId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTransactionInfo provides a mock function with given fields: ctx, transactionId
func (_m *PaymentUsecase) GetTransactionInfo(ctx context.Context, transactionId string) (model.TransactionInfoResponse, error) {
	ret := _m.Called(ctx, transactionId)

	var r0 model.TransactionInfoResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (model.TransactionInfoResponse, error)); ok {
		return rf(ctx, transactionId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) model.TransactionInfoResponse); ok {
		r0 = rf(ctx, transactionId)
	} else {
		r0 = ret.Get(0).(model.TransactionInfoResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, transactionId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTransactionListDetail provides a mock function with given fields: ctx, transactionId
func (_m *PaymentUsecase) GetTransactionListDetail(ctx context.Context, transactionId string) (model.TrxListDetail, error) {
	ret := _m.Called(ctx, transactionId)

	var r0 model.TrxListDetail
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (model.TrxListDetail, error)); ok {
		return rf(ctx, transactionId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) model.TrxListDetail); ok {
		r0 = rf(ctx, transactionId)
	} else {
		r0 = ret.Get(0).(model.TrxListDetail)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, transactionId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PaymentCheckout provides a mock function with given fields: ctx, userId, req
func (_m *PaymentUsecase) PaymentCheckout(ctx context.Context, userId int, req model.PaymentRequest) (model.PaymentResponse, error) {
	ret := _m.Called(ctx, userId, req)

	var r0 model.PaymentResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, model.PaymentRequest) (model.PaymentResponse, error)); ok {
		return rf(ctx, userId, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, model.PaymentRequest) model.PaymentResponse); ok {
		r0 = rf(ctx, userId, req)
	} else {
		r0 = ret.Get(0).(model.PaymentResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, model.PaymentRequest) error); ok {
		r1 = rf(ctx, userId, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SubmissionWarehouse provides a mock function with given fields: ctx, userId, req
func (_m *PaymentUsecase) SubmissionWarehouse(ctx context.Context, userId int, req model.SubmissionRequest) error {
	ret := _m.Called(ctx, userId, req)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int, model.SubmissionRequest) error); ok {
		r0 = rf(ctx, userId, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TransactionApproved provides a mock function with given fields: ctx, transactionId
func (_m *PaymentUsecase) TransactionApproved(ctx context.Context, transactionId string) error {
	ret := _m.Called(ctx, transactionId)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, transactionId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TransactionRejected provides a mock function with given fields: ctx, transactionId
func (_m *PaymentUsecase) TransactionRejected(ctx context.Context, transactionId string) error {
	ret := _m.Called(ctx, transactionId)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, transactionId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// VaCallback provides a mock function with given fields: ctx, req
func (_m *PaymentUsecase) VaCallback(ctx context.Context, req model.VaCallbackRequest) error {
	ret := _m.Called(ctx, req)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, model.VaCallbackRequest) error); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewPaymentUsecase interface {
	mock.TestingT
	Cleanup(func())
}

// NewPaymentUsecase creates a new instance of PaymentUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewPaymentUsecase(t mockConstructorTestingTNewPaymentUsecase) *PaymentUsecase {
	mock := &PaymentUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
