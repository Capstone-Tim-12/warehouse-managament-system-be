// Code generated by mockery v2.20.2. DO NOT EDIT.

package mocks

import (
	context "context"

	entity "github.com/Capstone-Tim-12/warehouse-managament-system-be/repository/database/entity"
	gorm "gorm.io/gorm"

	mock "github.com/stretchr/testify/mock"

	paginate "github.com/Capstone-Tim-12/warehouse-managament-system-be/utils/paginate"
)

// PaymentRepository is an autogenerated mock type for the PaymentRepository type
type PaymentRepository struct {
	mock.Mock
}

// BeginTrans provides a mock function with given fields: ctx
func (_m *PaymentRepository) BeginTrans(ctx context.Context) *gorm.DB {
	ret := _m.Called(ctx)

	var r0 *gorm.DB
	if rf, ok := ret.Get(0).(func(context.Context) *gorm.DB); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gorm.DB)
		}
	}

	return r0
}

// CreateInstalment provides a mock function with given fields: ctx, tx, req
func (_m *PaymentRepository) CreateInstalment(ctx context.Context, tx *gorm.DB, req *entity.Instalment) error {
	ret := _m.Called(ctx, tx, req)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *gorm.DB, *entity.Instalment) error); ok {
		r0 = rf(ctx, tx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateOngoingInstalment provides a mock function with given fields: ctx, tx, req
func (_m *PaymentRepository) CreateOngoingInstalment(ctx context.Context, tx *gorm.DB, req *entity.OngoingInstalment) error {
	ret := _m.Called(ctx, tx, req)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *gorm.DB, *entity.OngoingInstalment) error); ok {
		r0 = rf(ctx, tx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateTransaction provides a mock function with given fields: ctx, tx, req
func (_m *PaymentRepository) CreateTransaction(ctx context.Context, tx *gorm.DB, req *entity.Transaction) error {
	ret := _m.Called(ctx, tx, req)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *gorm.DB, *entity.Transaction) error); ok {
		r0 = rf(ctx, tx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindOngoingInstalmentByXpayment provides a mock function with given fields: ctx, xpaymentId
func (_m *PaymentRepository) FindOngoingInstalmentByXpayment(ctx context.Context, xpaymentId string) (*entity.OngoingInstalment, error) {
	ret := _m.Called(ctx, xpaymentId)

	var r0 *entity.OngoingInstalment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*entity.OngoingInstalment, error)); ok {
		return rf(ctx, xpaymentId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *entity.OngoingInstalment); ok {
		r0 = rf(ctx, xpaymentId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.OngoingInstalment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, xpaymentId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindPaymentScheme provides a mock function with given fields: ctx
func (_m *PaymentRepository) FindPaymentScheme(ctx context.Context) ([]entity.PaymentScheme, error) {
	ret := _m.Called(ctx)

	var r0 []entity.PaymentScheme
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]entity.PaymentScheme, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []entity.PaymentScheme); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.PaymentScheme)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindPaymentSchemeById provides a mock function with given fields: ctx, id
func (_m *PaymentRepository) FindPaymentSchemeById(ctx context.Context, id int) (*entity.PaymentScheme, error) {
	ret := _m.Called(ctx, id)

	var r0 *entity.PaymentScheme
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (*entity.PaymentScheme, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) *entity.PaymentScheme); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.PaymentScheme)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetInstalmentById provides a mock function with given fields: ctx, id
func (_m *PaymentRepository) GetInstalmentById(ctx context.Context, id int) (*entity.Instalment, error) {
	ret := _m.Called(ctx, id)

	var r0 *entity.Instalment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (*entity.Instalment, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) *entity.Instalment); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Instalment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetInstalmentUser provides a mock function with given fields: ctx, param
func (_m *PaymentRepository) GetInstalmentUser(ctx context.Context, param paginate.Pagination) ([]entity.Instalment, int64, error) {
	ret := _m.Called(ctx, param)

	var r0 []entity.Instalment
	var r1 int64
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, paginate.Pagination) ([]entity.Instalment, int64, error)); ok {
		return rf(ctx, param)
	}
	if rf, ok := ret.Get(0).(func(context.Context, paginate.Pagination) []entity.Instalment); ok {
		r0 = rf(ctx, param)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Instalment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, paginate.Pagination) int64); ok {
		r1 = rf(ctx, param)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(context.Context, paginate.Pagination) error); ok {
		r2 = rf(ctx, param)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetListInstalmentByTransactionId provides a mock function with given fields: ctx, transactionId, param
func (_m *PaymentRepository) GetListInstalmentByTransactionId(ctx context.Context, transactionId string, param paginate.Pagination) ([]entity.Instalment, int64, error) {
	ret := _m.Called(ctx, transactionId, param)

	var r0 []entity.Instalment
	var r1 int64
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string, paginate.Pagination) ([]entity.Instalment, int64, error)); ok {
		return rf(ctx, transactionId, param)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, paginate.Pagination) []entity.Instalment); ok {
		r0 = rf(ctx, transactionId, param)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Instalment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, paginate.Pagination) int64); ok {
		r1 = rf(ctx, transactionId, param)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, paginate.Pagination) error); ok {
		r2 = rf(ctx, transactionId, param)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetListPaymentMethod provides a mock function with given fields: ctx
func (_m *PaymentRepository) GetListPaymentMethod(ctx context.Context) ([]entity.PaymentMethod, error) {
	ret := _m.Called(ctx)

	var r0 []entity.PaymentMethod
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]entity.PaymentMethod, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []entity.PaymentMethod); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.PaymentMethod)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetListTransactionByUserIdAndStatus provides a mock function with given fields: ctx, userId, status, param
func (_m *PaymentRepository) GetListTransactionByUserIdAndStatus(ctx context.Context, userId int, status entity.TranscationStatus, param paginate.Pagination) ([]entity.Transaction, int64, error) {
	ret := _m.Called(ctx, userId, status, param)

	var r0 []entity.Transaction
	var r1 int64
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, int, entity.TranscationStatus, paginate.Pagination) ([]entity.Transaction, int64, error)); ok {
		return rf(ctx, userId, status, param)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, entity.TranscationStatus, paginate.Pagination) []entity.Transaction); ok {
		r0 = rf(ctx, userId, status, param)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, entity.TranscationStatus, paginate.Pagination) int64); ok {
		r1 = rf(ctx, userId, status, param)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(context.Context, int, entity.TranscationStatus, paginate.Pagination) error); ok {
		r2 = rf(ctx, userId, status, param)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetListTransactionDasboar provides a mock function with given fields: ctx, param
func (_m *PaymentRepository) GetListTransactionDasboar(ctx context.Context, param paginate.Pagination) ([]entity.Transaction, int64, error) {
	ret := _m.Called(ctx, param)

	var r0 []entity.Transaction
	var r1 int64
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, paginate.Pagination) ([]entity.Transaction, int64, error)); ok {
		return rf(ctx, param)
	}
	if rf, ok := ret.Get(0).(func(context.Context, paginate.Pagination) []entity.Transaction); ok {
		r0 = rf(ctx, param)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, paginate.Pagination) int64); ok {
		r1 = rf(ctx, param)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(context.Context, paginate.Pagination) error); ok {
		r2 = rf(ctx, param)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetListTransactionData provides a mock function with given fields: ctx, param
func (_m *PaymentRepository) GetListTransactionData(ctx context.Context, param paginate.PaginationTrx) ([]entity.Transaction, int64, error) {
	ret := _m.Called(ctx, param)

	var r0 []entity.Transaction
	var r1 int64
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, paginate.PaginationTrx) ([]entity.Transaction, int64, error)); ok {
		return rf(ctx, param)
	}
	if rf, ok := ret.Get(0).(func(context.Context, paginate.PaginationTrx) []entity.Transaction); ok {
		r0 = rf(ctx, param)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, paginate.PaginationTrx) int64); ok {
		r1 = rf(ctx, param)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(context.Context, paginate.PaginationTrx) error); ok {
		r2 = rf(ctx, param)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetPaymentMethodById provides a mock function with given fields: ctx, id
func (_m *PaymentRepository) GetPaymentMethodById(ctx context.Context, id int) (*entity.PaymentMethod, error) {
	ret := _m.Called(ctx, id)

	var r0 *entity.PaymentMethod
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (*entity.PaymentMethod, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) *entity.PaymentMethod); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.PaymentMethod)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetReason provides a mock function with given fields: ctx
func (_m *PaymentRepository) GetReason(ctx context.Context) ([]entity.ReasonTerminateContract, error) {
	ret := _m.Called(ctx)

	var r0 []entity.ReasonTerminateContract
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]entity.ReasonTerminateContract, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []entity.ReasonTerminateContract); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.ReasonTerminateContract)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTotalPayment provides a mock function with given fields: ctx
func (_m *PaymentRepository) GetTotalPayment(ctx context.Context) (float64, error) {
	ret := _m.Called(ctx)

	var r0 float64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (float64, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) float64); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(float64)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTotalPaymentOnYear provides a mock function with given fields: ctx, year
func (_m *PaymentRepository) GetTotalPaymentOnYear(ctx context.Context, year int) (float64, error) {
	ret := _m.Called(ctx, year)

	var r0 float64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (float64, error)); ok {
		return rf(ctx, year)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) float64); ok {
		r0 = rf(ctx, year)
	} else {
		r0 = ret.Get(0).(float64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, year)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTransactionById provides a mock function with given fields: ctx, transactionId
func (_m *PaymentRepository) GetTransactionById(ctx context.Context, transactionId string) (*entity.Transaction, error) {
	ret := _m.Called(ctx, transactionId)

	var r0 *entity.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*entity.Transaction, error)); ok {
		return rf(ctx, transactionId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *entity.Transaction); ok {
		r0 = rf(ctx, transactionId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, transactionId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTransactionByUserId provides a mock function with given fields: ctx, userId, param
func (_m *PaymentRepository) GetTransactionByUserId(ctx context.Context, userId int, param paginate.Pagination) ([]entity.Transaction, int64, error) {
	ret := _m.Called(ctx, userId, param)

	var r0 []entity.Transaction
	var r1 int64
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, int, paginate.Pagination) ([]entity.Transaction, int64, error)); ok {
		return rf(ctx, userId, param)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, paginate.Pagination) []entity.Transaction); ok {
		r0 = rf(ctx, userId, param)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, paginate.Pagination) int64); ok {
		r1 = rf(ctx, userId, param)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(context.Context, int, paginate.Pagination) error); ok {
		r2 = rf(ctx, userId, param)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetTransactionDetailById provides a mock function with given fields: ctx, transactionId
func (_m *PaymentRepository) GetTransactionDetailById(ctx context.Context, transactionId string) (*entity.Transaction, error) {
	ret := _m.Called(ctx, transactionId)

	var r0 *entity.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*entity.Transaction, error)); ok {
		return rf(ctx, transactionId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *entity.Transaction); ok {
		r0 = rf(ctx, transactionId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, transactionId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTransactionDetailByWarehouseId provides a mock function with given fields: ctx, warehouseId, param
func (_m *PaymentRepository) GetTransactionDetailByWarehouseId(ctx context.Context, warehouseId int, param paginate.Pagination) ([]entity.Transaction, int64, error) {
	ret := _m.Called(ctx, warehouseId, param)

	var r0 []entity.Transaction
	var r1 int64
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, int, paginate.Pagination) ([]entity.Transaction, int64, error)); ok {
		return rf(ctx, warehouseId, param)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, paginate.Pagination) []entity.Transaction); ok {
		r0 = rf(ctx, warehouseId, param)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, paginate.Pagination) int64); ok {
		r1 = rf(ctx, warehouseId, param)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(context.Context, int, paginate.Pagination) error); ok {
		r2 = rf(ctx, warehouseId, param)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetTransactionUserDetailByTransactionId provides a mock function with given fields: ctx, transactionId
func (_m *PaymentRepository) GetTransactionUserDetailByTransactionId(ctx context.Context, transactionId string) (*entity.Transaction, error) {
	ret := _m.Called(ctx, transactionId)

	var r0 *entity.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*entity.Transaction, error)); ok {
		return rf(ctx, transactionId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *entity.Transaction); ok {
		r0 = rf(ctx, transactionId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, transactionId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateInstalment provides a mock function with given fields: ctx, tx, req
func (_m *PaymentRepository) UpdateInstalment(ctx context.Context, tx *gorm.DB, req *entity.Instalment) error {
	ret := _m.Called(ctx, tx, req)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *gorm.DB, *entity.Instalment) error); ok {
		r0 = rf(ctx, tx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateOngoingInstalment provides a mock function with given fields: ctx, tx, req
func (_m *PaymentRepository) UpdateOngoingInstalment(ctx context.Context, tx *gorm.DB, req *entity.OngoingInstalment) error {
	ret := _m.Called(ctx, tx, req)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *gorm.DB, *entity.OngoingInstalment) error); ok {
		r0 = rf(ctx, tx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateTransaction provides a mock function with given fields: ctx, tx, req
func (_m *PaymentRepository) UpdateTransaction(ctx context.Context, tx *gorm.DB, req *entity.Transaction) error {
	ret := _m.Called(ctx, tx, req)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *gorm.DB, *entity.Transaction) error); ok {
		r0 = rf(ctx, tx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewPaymentRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewPaymentRepository creates a new instance of PaymentRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewPaymentRepository(t mockConstructorTestingTNewPaymentRepository) *PaymentRepository {
	mock := &PaymentRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
