// Code generated by mockery v2.20.2. DO NOT EDIT.

package mocks

import (
	context "context"
	multipart "mime/multipart"

	model "github.com/Capstone-Tim-12/warehouse-managament-system-be/usecase/user/model"
	mock "github.com/stretchr/testify/mock"

	paginate "github.com/Capstone-Tim-12/warehouse-managament-system-be/utils/paginate"
)

// UserUsecase is an autogenerated mock type for the UserUsecase type
type UserUsecase struct {
	mock.Mock
}

// ChatBot provides a mock function with given fields: ctx, userId, text
func (_m *UserUsecase) ChatBot(ctx context.Context, userId int, text string) (model.ChatResponse, error) {
	ret := _m.Called(ctx, userId, text)

	var r0 model.ChatResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, string) (model.ChatResponse, error)); ok {
		return rf(ctx, userId, text)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, string) model.ChatResponse); ok {
		r0 = rf(ctx, userId, text)
	} else {
		r0 = ret.Get(0).(model.ChatResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, string) error); ok {
		r1 = rf(ctx, userId, text)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteUser provides a mock function with given fields: ctx, id
func (_m *UserUsecase) DeleteUser(ctx context.Context, id int) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllProvince provides a mock function with given fields: ctx
func (_m *UserUsecase) GetAllProvince(ctx context.Context) ([]model.RegionResponse, error) {
	ret := _m.Called(ctx)

	var r0 []model.RegionResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]model.RegionResponse, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []model.RegionResponse); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.RegionResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAvatarList provides a mock function with given fields: ctx
func (_m *UserUsecase) GetAvatarList(ctx context.Context) ([]model.GetAvatarResponse, error) {
	ret := _m.Called(ctx)

	var r0 []model.GetAvatarResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]model.GetAvatarResponse, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []model.GetAvatarResponse); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.GetAvatarResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDistricByRegencyId provides a mock function with given fields: ctx, id
func (_m *UserUsecase) GetDistricByRegencyId(ctx context.Context, id string) ([]model.RegionResponse, error) {
	ret := _m.Called(ctx, id)

	var r0 []model.RegionResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]model.RegionResponse, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []model.RegionResponse); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.RegionResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProfile provides a mock function with given fields: ctx, userId
func (_m *UserUsecase) GetProfile(ctx context.Context, userId string) (model.GetProfileResponse, error) {
	ret := _m.Called(ctx, userId)

	var r0 model.GetProfileResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (model.GetProfileResponse, error)); ok {
		return rf(ctx, userId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) model.GetProfileResponse); ok {
		r0 = rf(ctx, userId)
	} else {
		r0 = ret.Get(0).(model.GetProfileResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRegencyByProvinceId provides a mock function with given fields: ctx, id
func (_m *UserUsecase) GetRegencyByProvinceId(ctx context.Context, id string) ([]model.RegionResponse, error) {
	ret := _m.Called(ctx, id)

	var r0 []model.RegionResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]model.RegionResponse, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []model.RegionResponse); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.RegionResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserById provides a mock function with given fields: ctx, userId
func (_m *UserUsecase) GetUserById(ctx context.Context, userId int) (model.UserListResponse, error) {
	ret := _m.Called(ctx, userId)

	var r0 model.UserListResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (model.UserListResponse, error)); ok {
		return rf(ctx, userId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) model.UserListResponse); ok {
		r0 = rf(ctx, userId)
	} else {
		r0 = ret.Get(0).(model.UserListResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserInfo provides a mock function with given fields: ctx, userId
func (_m *UserUsecase) GetUserInfo(ctx context.Context, userId int) (model.UserInfoResponse, error) {
	ret := _m.Called(ctx, userId)

	var r0 model.UserInfoResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (model.UserInfoResponse, error)); ok {
		return rf(ctx, userId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) model.UserInfoResponse); ok {
		r0 = rf(ctx, userId)
	} else {
		r0 = ret.Get(0).(model.UserInfoResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserList provides a mock function with given fields: ctx, param
func (_m *UserUsecase) GetUserList(ctx context.Context, param paginate.Pagination) ([]model.UserListResponse, int64, error) {
	ret := _m.Called(ctx, param)

	var r0 []model.UserListResponse
	var r1 int64
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, paginate.Pagination) ([]model.UserListResponse, int64, error)); ok {
		return rf(ctx, param)
	}
	if rf, ok := ret.Get(0).(func(context.Context, paginate.Pagination) []model.UserListResponse); ok {
		r0 = rf(ctx, param)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.UserListResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, paginate.Pagination) int64); ok {
		r1 = rf(ctx, param)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(context.Context, paginate.Pagination) error); ok {
		r2 = rf(ctx, param)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Login provides a mock function with given fields: ctx, req, lat, long
func (_m *UserUsecase) Login(ctx context.Context, req model.LoginRequest, lat float64, long float64) (model.LoginResponse, error) {
	ret := _m.Called(ctx, req, lat, long)

	var r0 model.LoginResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.LoginRequest, float64, float64) (model.LoginResponse, error)); ok {
		return rf(ctx, req, lat, long)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.LoginRequest, float64, float64) model.LoginResponse); ok {
		r0 = rf(ctx, req, lat, long)
	} else {
		r0 = ret.Get(0).(model.LoginResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.LoginRequest, float64, float64) error); ok {
		r1 = rf(ctx, req, lat, long)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegisterData provides a mock function with given fields: ctx, req
func (_m *UserUsecase) RegisterData(ctx context.Context, req model.RegisterDataRequest) error {
	ret := _m.Called(ctx, req)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, model.RegisterDataRequest) error); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ResendOtp provides a mock function with given fields: ctx, req
func (_m *UserUsecase) ResendOtp(ctx context.Context, req model.OtpRequest) error {
	ret := _m.Called(ctx, req)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, model.OtpRequest) error); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ResetPassword provides a mock function with given fields: ctx, req
func (_m *UserUsecase) ResetPassword(ctx context.Context, req model.ResetPasswordRequest) error {
	ret := _m.Called(ctx, req)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, model.ResetPasswordRequest) error); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateAdminDasboarUser provides a mock function with given fields: ctx, userId, req
func (_m *UserUsecase) UpdateAdminDasboarUser(ctx context.Context, userId int, req model.UserSettingRequest) error {
	ret := _m.Called(ctx, userId, req)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int, model.UserSettingRequest) error); ok {
		r0 = rf(ctx, userId, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateEmail provides a mock function with given fields: ctx, userId, req
func (_m *UserUsecase) UpdateEmail(ctx context.Context, userId int, req model.OtpRequest) error {
	ret := _m.Called(ctx, userId, req)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int, model.OtpRequest) error); ok {
		r0 = rf(ctx, userId, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdatePhotoProfile provides a mock function with given fields: ctx, userId, req
func (_m *UserUsecase) UpdatePhotoProfile(ctx context.Context, userId int, req model.UpdatePhotoProfileRequest) error {
	ret := _m.Called(ctx, userId, req)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int, model.UpdatePhotoProfileRequest) error); ok {
		r0 = rf(ctx, userId, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateUsernameProfile provides a mock function with given fields: ctx, userId, req
func (_m *UserUsecase) UpdateUsernameProfile(ctx context.Context, userId string, req model.UpdateUsernameProfileRequest) error {
	ret := _m.Called(ctx, userId, req)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, model.UpdateUsernameProfileRequest) error); ok {
		r0 = rf(ctx, userId, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UploadPhoto provides a mock function with given fields: ctx, image
func (_m *UserUsecase) UploadPhoto(ctx context.Context, image *multipart.FileHeader) (model.UploadPhotoResponse, error) {
	ret := _m.Called(ctx, image)

	var r0 model.UploadPhotoResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *multipart.FileHeader) (model.UploadPhotoResponse, error)); ok {
		return rf(ctx, image)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *multipart.FileHeader) model.UploadPhotoResponse); ok {
		r0 = rf(ctx, image)
	} else {
		r0 = ret.Get(0).(model.UploadPhotoResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *multipart.FileHeader) error); ok {
		r1 = rf(ctx, image)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserRegister provides a mock function with given fields: ctx, req, long, lat
func (_m *UserUsecase) UserRegister(ctx context.Context, req model.RegisterUserRequest, long float64, lat float64) (model.RegisterUserResponse, error) {
	ret := _m.Called(ctx, req, long, lat)

	var r0 model.RegisterUserResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.RegisterUserRequest, float64, float64) (model.RegisterUserResponse, error)); ok {
		return rf(ctx, req, long, lat)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.RegisterUserRequest, float64, float64) model.RegisterUserResponse); ok {
		r0 = rf(ctx, req, long, lat)
	} else {
		r0 = ret.Get(0).(model.RegisterUserResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.RegisterUserRequest, float64, float64) error); ok {
		r1 = rf(ctx, req, long, lat)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// VerificationUser provides a mock function with given fields: ctx, req
func (_m *UserUsecase) VerificationUser(ctx context.Context, req model.VerificationUserRequest) (model.VerificationUserResponse, error) {
	ret := _m.Called(ctx, req)

	var r0 model.VerificationUserResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.VerificationUserRequest) (model.VerificationUserResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.VerificationUserRequest) model.VerificationUserResponse); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(model.VerificationUserResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.VerificationUserRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewUserUsecase interface {
	mock.TestingT
	Cleanup(func())
}

// NewUserUsecase creates a new instance of UserUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUserUsecase(t mockConstructorTestingTNewUserUsecase) *UserUsecase {
	mock := &UserUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
